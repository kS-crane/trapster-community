#!/usr/sbin/nft -f

# IPv4 port scanning and information gathering detection
add table inet filter
add chain inet filter trapster_portscan { type filter hook input priority 1 ; policy accept ; }

# Port scanning detection chain
add chain inet filter syn_scan
# A record of current attackers on cooldown
add set inet filter syn_ip {
        flags dynamic
        type ipv4_addr
        timeout 30s
        size 256
        comment "IP saddr suspected of syn scan"
}

add set inet filter ip_to_ports {
        type ipv4_addr . inet_service
        flags dynamic
        timeout 30s
        size 1000
        comment "IP address to unique port mapping"
}

add set inet filter xmas_ip {
        type ipv4_addr
        flags dynamic
        timeout 30s
        size 256
        comment "IP saddr suspected of xmas scan"
}

add set inet filter null_ip {
        type ipv4_addr
        flags dynamic
        timeout 30s
        size 256
        comment "IP saddr suspected of null scan"
}

add set inet filter fin_ip {
        type ipv4_addr
        flags dynamic
        timeout 30s
        size 256
        comment "IP saddr suspected of xmas scan"
}

add set inet filter null_ip {
        type ipv4_addr
        flags dynamic
        timeout 30s
        size 256
        comment "IP saddr suspected of null scan"
}

add set inet filter fin_ip {
        type ipv4_addr
        flags dynamic
        timeout 30s
        size 256
        comment "IP saddr suspected of fin scan"
}
add set inet filter os_ip {
        type ipv4_addr
        flags dynamic
        timeout 30s
        size 256
        comment "IP saddr suspected of OS scan"
}

#Already has established connection:
#Handle OS Detection scan
add rule inet filter trapster_portscan tcp flags {0x2b, 0x29} ip saddr @os_ip accept
add rule inet filter trapster_portscan tcp flags == 0x2b ip saddr @syn_ip tcp option maxseg size 265 add @os_ip { ip saddr } log prefix "OS: " level info
add rule inet filter trapster_portscan tcp flags == 0x29 ip saddr @syn_ip add @os_ip { ip saddr } log prefix "OS: " level info


#accept loopback
add rule inet filter trapster_portscan iif lo accept
add rule inet filter trapster_portscan ct state established,related accept

#Handle SYN scans
#Send all SYN packets to syn_scan
add rule inet filter trapster_portscan tcp flags == 0x02 jump syn_scan
#Accept packets going to the same port (ex: 80 for ffuf)
add rule inet filter syn_scan ip saddr . tcp dport @ip_to_ports accept
#Track the src ip . dport pair
add rule inet filter syn_scan ip protocol tcp ct state new, untracked update @ip_to_ports { ip saddr . tcp dport }
#Decrease number of logs by accepting after being added to tracked_IPs
add rule inet filter syn_scan ip saddr @syn_ip accept
#Set rate traffic must go over to be suspish
add rule inet filter syn_scan ip protocol tcp ct state new, untracked meter ratemeter { ip saddr timeout 30s limit rate over 2/second } update @syn_ip { ip saddr }
#log tracked ips with syn:
add rule inet filter syn_scan ip saddr @syn_ip log prefix "SYN: " level info

#Handle XMAS scan
add rule inet filter trapster_portscan tcp flags == 0x29 ip saddr @xmas_ip accept
add rule inet filter trapster_portscan tcp flags == 0x29 limit rate over 2/second add @xmas_ip { ip saddr } log prefix "XMAS: " level info
#add rule inet filter trapster_portscan

#Handle NULL scan
add rule inet filter trapster_portscan tcp flags == 0x0 ip saddr @null_ip accept
add rule inet filter trapster_portscan tcp flags == 0x0 limit rate over 2/second add @null_ip { ip saddr } log prefix "NULL: " level info

#Handle FIN scan
add rule inet filter trapster_portscan tcp flags == 0x01 ip saddr @fin_ip accept
add rule inet filter trapster_portscan tcp flags == 0x01 limit rate over 2/second add @fin_ip { ip saddr } log prefix "FIN: " level info
